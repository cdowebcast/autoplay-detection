(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.autoplayDetector = {})));
}(this, (function (exports) { 'use strict';

const videoFile = `data:video/mp4;base64,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`;

const canAutoplay = () => new Promise((resolve, reject) => {
  const cleanUp = video => document.body.removeChild(video);
    
  const successPlay = video => () => {
    cleanUp(video);
    resolve(true);        
  };

  const failPlay = video => () => {
    cleanUp(video);
    resolve(false);
  };
    
  try {
    let video = document.createElement('video');
    video.autoplay = true;
    video.inline = true;
    video.src = videoFile;
    video.load();
    video.style.display = 'none';
    video.playing = false;
    video.volume = 0.001;
    video.controls = true;

    document.body.appendChild(video);

    video.play()
      .then(successPlay(video))
      .catch(failPlay(video));
  } catch (err) {
    console.log('opps, something went wrong');
    reject(false);
  }
 });

//canAutoplay().then(supported => {
//  console.log('Can it autoplay?', supported);  
//})

exports.canAutoplay = canAutoplay;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy92aWRlby5qcyIsIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB2aWRlb0ZpbGUgPSBgZGF0YTp2aWRlby9tcDQ7YmFzZTY0LEFBQUFJR1owZVhCdGNEUXlBQUFDQUdsemIyMXBjMjh5WVhaak1XMXdOREVBQUFBSVpuSmxaUUFBQThWdFpHRjBJR2dRQWFCQURpQm9NQUdnd0E0aFgvOC9BVFlFU0JFZ2hnRnhncXdBZFBBZi9yd0dNQi9nQUFmMEFBUDhmNEFBQUNBQUFBQVBqODgzekFBQUFBQi9UN3BmNGpBL0k0QWhYeTdBQUlBQkFBTUFCQTN5aXFXYTFvR1NnbVlvcGlFTmdVVEpXRk1nV2JUMStmaisvWDM4K2V1UC9HOGoxK2Zyalgzci9tNjIvVC85dnQvLy85ZnZwSy9QLzkzOXYvL1lKMFpkbnZ6b3doRWtFR0ptUVdEa0pzZ0U0a0NWemUyRUJGaWpkSmtSVTVjRUtRT05HZkVHQjI3Y3RKWkxBc1R6L1c2dThjYzR4Y0h2YS9xOGZ1bjl6K2hya0huZTNzdlRQL3oreDFRNVlPNno1WVVYWXNxZmt0bHlsOWV1UE5palJaQnlBT3p3eEhObmgrRzg4S1ZWVkhScVdUSk5mcGY3TGhFbW5TV3B3UU5ZeWp6dGtPQXFwcWwrYkFIdDJJZTNZazRRNktFdlJpZm9oLzR2VlJLUkFuQ3gxU21kZHZiTEZhK2FyQTBzVGMyU0xNS0FISGdjZUJ4NEhIZ2w0b2QwUEVFdlJpZEEvK0FQL2dELzRCZjhBQUFBQ1ZrZ0JWMEFBNEFoZWcvLy9nQUFCQkdXQ2dkQlNFSHVFQ0xkTlY2ZVAvN20vWC82Z0NpVy82aDh6MGljVmFCYU1aNmpiZVF6RVJUWW9QbnJibXJLalBMWENjYW5pQ2dvS0NnclhXNysyZnVjZ0FBdnA5VmxrQVBRRkVMREVJSSt4MitRQUFBQm5oRldTOHhFOHQ4Mi95cGxqV2JnSVJvT1AvOEFBQVB3Q1FjRUlJSnNJUGNJRU9MeWV1Ly8rWC83Z3l5RFlzM0EzdnBhd0RJcWRzdG1iSWhJcXNPL1MxZDBtbWlhTElobjgzcVVBK1B2SUFBQUFIbDk1QUFld0Y0eERBd1Y5UU1BbFNnQUF4R0V0b0U1aTJRMTBGVUFveFJxcmlFYUQvLy9BQUFENEFpRkJFRUNiQ0Q1Q0JEZ2ZPZi81Ly8xR3lZZktJNFpCQlFZOHhCaSt0aGNkeFRwaHFyRTFCTjJSM1Q3bVNNVHZVb0I4ZmVRQUFBQU1QVVlBRHdCbUVDL3FBQUFBRkVMbktXWGxuWHB3Q0VhRC8vL0FBQUQyQW1MUXdUWVFlNFFJY0R4di8rLy8rUXFvQTBZbWtBNmJzdDFMc3VDTUxaYU45Mm5pOUg2RGlzcDN0NWRUVXpjVUVvRmtDSENwOFpLNm4wQUFBQUN2N3ZnZ0E3Z2FCaUVFL1U3K1FBQUFEaGFSVkp2RkFqZVRXMFVEaUNrcEhnaEdnLy8vd0FBQS9BSWhNVVFnbXdnK1FnUk5hYjlkLy8wdi95SEpUTm44TzlOVndwM0p3Mjc4cGRGZmtyN09HaGZIRDRxbGpWMGJTRlQ0eVYxUG9BQUFBRHF2eHZhQUhzRHFJRmZVQUFBQUZOL0puN0t4eUVhRC8vL0FBQUQ0QWlGUldDQ2JDRDVDQkRpWFBYdi8vUy8vTVBIbitTTHhUWmhJS2hLSEpja0ZQbW1hNUIycXU2aGkvVW8zWHpMeS8xS2hqOHhnMVBJMWFTYUxqVmNBQUFBQy9SLzdscEFCM0EwRElJSitwejRBQUFBRU1JVW1rUXNaWGo5WFNEeTZnZCsrTm5BQUFBREYyMXZiM1lBQUFCc2JYWm9aQUFBQUFEVi9GZVMxZnhYa2dBQUErZ0FBQVVBQUFFQUFBRUFBQUFBQUFBQUFBQUFBQUFCQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU1BQUFBWWFXOWtjd0FBQUFBUWdJQ0FCd0JQLy8vKy8vOEFBQUljZEhKaGF3QUFBRngwYTJoa0FBQUFBOVg4VjVMVi9GZVNBQUFBQWdBQUFBQUFBQVVBQUFBQUFBQUFBQUFBQUFBQkFRQUFBQUFCQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFCb20xa2FXRUFBQUFnYldSb1pBQUFBQURWL0ZlUzFmeFhrZ0FBSDBBQUFDZ0FWY1FBQUFBQUFDZG9aR3h5QUFBQUFBQUFBQUJ6YjNWdUFBQUFBQUFBQUFBQUFBQUFVM1JsY21WdkFBQUFBVk50YVc1bUFBQUFFSE50YUdRQUFBQUFBQUFBQUFBQUFDUmthVzVtQUFBQUhHUnlaV1lBQUFBQUFBQUFBUUFBQUF4MWNtd2dBQUFBQVFBQUFSZHpkR0pzQUFBQVozTjBjMlFBQUFBQUFBQUFBUUFBQUZkdGNEUmhBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUNBQkFBQUFBQUgwQUFBQUFBQURObGMyUnpBQUFBQUFPQWdJQWlBQUlBQklDQWdCUkFGUUFBQUFBQUFBQUFBQUFBQllDQWdBSVZrQWFBZ0lBQkFnQUFBQmh6ZEhSekFBQUFBQUFBQUFFQUFBQUtBQUFFQUFBQUFCeHpkSE5qQUFBQUFBQUFBQUVBQUFBQkFBQUFBUUFBQUFFQUFBQThjM1J6ZWdBQUFBQUFBQUFBQUFBQUNnQUFBQWNBQUFBSEFBQUFPUUFBQVNNQUFBQnRBQUFBWkFBQUFGY0FBQUJuQUFBQVZnQUFBRzRBQUFBNGMzUmpid0FBQUFBQUFBQUtBQUFBTUFBQUFEY0FBQUErQUFBQWR3QUFBWm9BQUFJSEFBQUNhd0FBQXNJQUFBTXBBQUFEZndBQUFCWjFaSFJoQUFBQURtNWhiV1ZUZEdWeVpXOEFBQUJ2ZFdSMFlRQUFBR2R0WlhSaEFBQUFBQUFBQUNGb1pHeHlBQUFBQUFBQUFBQnRaR2x5WVhCd2JBQUFBQUFBQUFBQUFBQUFBRHBwYkhOMEFBQUFNcWwwYjI4QUFBQXFaR0YwWVFBQUFBRUFBQUFBU0dGdVpFSnlZV3RsSURFdU1DNDNJREl3TVRjd05EQTVNREE9YDtcbmV4cG9ydCBkZWZhdWx0IHZpZGVvRmlsZTtcbiIsImltcG9ydCB2aWRlb2ZpbGUgZnJvbSAnLi92aWRlbyc7XG5cbmV4cG9ydCBjb25zdCBjYW5BdXRvcGxheSA9ICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgbGV0IHN1cHBvcnRzQXV0b3BsYXk7XG4gICAgXG4gIGNvbnN0IGNsZWFuVXAgPSB2aWRlbyA9PiBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHZpZGVvKTtcbiAgICBcbiAgY29uc3Qgc3VjY2Vzc1BsYXkgPSB2aWRlbyA9PiAoKSA9PiB7XG4gICAgY2xlYW5VcCh2aWRlbyk7XG4gICAgcmVzb2x2ZSh0cnVlKTsgICAgICAgIFxuICB9O1xuXG4gIGNvbnN0IGZhaWxQbGF5ID0gdmlkZW8gPT4gKCkgPT4ge1xuICAgIGNsZWFuVXAodmlkZW8pO1xuICAgIHJlc29sdmUoZmFsc2UpO1xuICB9O1xuICAgIFxuICB0cnkge1xuICAgIGxldCB2aWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgdmlkZW8uYXV0b3BsYXkgPSB0cnVlO1xuICAgIHZpZGVvLmlubGluZSA9IHRydWU7XG4gICAgdmlkZW8uc3JjID0gdmlkZW9maWxlO1xuICAgIHZpZGVvLmxvYWQoKTtcbiAgICB2aWRlby5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIHZpZGVvLnBsYXlpbmcgPSBmYWxzZTtcbiAgICB2aWRlby52b2x1bWUgPSAwLjAwMTtcbiAgICB2aWRlby5jb250cm9scyA9IHRydWU7XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHZpZGVvKTtcblxuICAgIHZpZGVvLnBsYXkoKVxuICAgICAgLnRoZW4oc3VjY2Vzc1BsYXkodmlkZW8pKVxuICAgICAgLmNhdGNoKGZhaWxQbGF5KHZpZGVvKSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUubG9nKCdvcHBzLCBzb21ldGhpbmcgd2VudCB3cm9uZycpO1xuICAgIHJlamVjdChmYWxzZSk7XG4gIH1cbiB9KTtcblxuLy9jYW5BdXRvcGxheSgpLnRoZW4oc3VwcG9ydGVkID0+IHtcbi8vICBjb25zb2xlLmxvZygnQ2FuIGl0IGF1dG9wbGF5PycsIHN1cHBvcnRlZCk7ICBcbi8vfSlcbiJdLCJuYW1lcyI6WyJ2aWRlb2ZpbGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU0sU0FBUyxHQUFHLENBQUMsazNFQUFrM0UsQ0FBQzs7QUNFLzNFLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxLQUFLO0VBQ2hFLEFBRUEsTUFBTSxPQUFPLEdBQUcsS0FBSyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOztFQUUxRCxNQUFNLFdBQVcsR0FBRyxLQUFLLElBQUksTUFBTTtJQUNqQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDZixDQUFDOztFQUVGLE1BQU0sUUFBUSxHQUFHLEtBQUssSUFBSSxNQUFNO0lBQzlCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUNoQixDQUFDOztFQUVGLElBQUk7SUFDRixJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLEtBQUssQ0FBQyxHQUFHLEdBQUdBLFNBQVMsQ0FBQztJQUN0QixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDYixLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDN0IsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDdEIsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDckIsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7O0lBRXRCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOztJQUVqQyxLQUFLLENBQUMsSUFBSSxFQUFFO09BQ1QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUN4QixLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7R0FDM0IsQ0FBQyxPQUFPLEdBQUcsRUFBRTtJQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQztJQUMxQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDZjtFQUNELENBQUMsQ0FBQzs7OztJQUlBOzs7Ozs7Ozs7Ozs7In0=
